package org.mypsycho.emf.modit.dw.dummyworld.provider;

import java.util.Collection;
import java.util.Collections;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.ETypedElement;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.mypsycho.emf.modit.dw.dummyworld.DwPackage;
import org.mypsycho.emf.modit.dw.dummyworld.Job;
import org.mypsycho.emf.modit.dw.dummyworld.Person;
import org.mypsycho.emf.modit.dw.dummyworld.Titled;
import org.mypsycho.emf.modit.dw.dummyworld.provider.DwEditPlugin;
import org.mypsycho.emf.modit.edit.ModitEditFactory;
import org.mypsycho.emf.modit.edit.ModitEditLabels;
import org.mypsycho.emf.modit.edit.ModitEditListeners;
import org.mypsycho.modit.emf.stretch.EmfExtensions;
import org.mypsycho.modit.emf.stretch.EmfToolings;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * <p>
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * </p>
 */
@SuppressWarnings("all")
public class DwIpAdapterFactory extends ModitEditFactory {
  private static final DwPackage PKG = DwPackage.eINSTANCE;
  
  /**
   * This constructs an instance.
   * 
   * @generated
   */
  public DwIpAdapterFactory() {
    super(DwEditPlugin.INSTANCE);
    EmfExtensions.OBinding<String, EObject, Titled> _doubleLessThan = this.descriptor.<String, EObject, Titled>operator_doubleLessThan(
      Titled.class, ModitEditLabels.TEXT);
    final Function1<Titled, String> _function = (Titled it) -> {
      return it.getName();
    };
    _doubleLessThan.operator_add(_function);
    EmfExtensions.OBinding<String, EObject, Person> _doubleLessThan_1 = this.descriptor.<String, EObject, Person>operator_doubleLessThan(
      Person.class, ModitEditLabels.TEXT);
    final Function1<Person, String> _function_1 = (Person it) -> {
      String _firstname = it.getFirstname();
      String _plus = (_firstname + " ");
      String _lastname = it.getLastname();
      return (_plus + _lastname);
    };
    _doubleLessThan_1.operator_add(_function_1);
    EmfExtensions.OBinding<String, EObject, Job> _doubleLessThan_2 = this.descriptor.<String, EObject, Job>operator_doubleLessThan(
      Job.class, ModitEditLabels.TEXT);
    final Function1<Job, String> _function_2 = (Job it) -> {
      String _xifexpression = null;
      Person _employee = it.getEmployee();
      boolean _tripleNotEquals = (_employee != null);
      if (_tripleNotEquals) {
        StringConcatenation _builder = new StringConcatenation();
        Person _employee_1 = it.getEmployee();
        String _multiply = this.descriptor.<String, EObject, Person>operator_multiply(_employee_1, ModitEditLabels.TEXT);
        _builder.append(_multiply);
        _builder.append(" (");
        String _name = it.getName();
        _builder.append(_name);
        _builder.append(")");
        _xifexpression = _builder.toString();
      } else {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("unaffected ");
        String _name_1 = it.getName();
        _builder_1.append(_name_1);
        _xifexpression = _builder_1.toString();
      }
      return _xifexpression;
    };
    _doubleLessThan_2.operator_add(_function_2);
    EmfToolings.CBinding<Collection<? extends ETypedElement>> _doubleLessThan_3 = this.descriptor.<Collection<? extends ETypedElement>>operator_doubleLessThan(
      Job.class, ModitEditListeners.DEPENDENCIES);
    EReference _job_Employee = DwIpAdapterFactory.PKG.getJob_Employee();
    _doubleLessThan_3.operator_add(Collections.<ETypedElement>unmodifiableList(CollectionLiterals.<ETypedElement>newArrayList(_job_Employee)));
  }
}
